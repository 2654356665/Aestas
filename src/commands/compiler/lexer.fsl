//This lexer has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 16)
{

module Aestas.Commands.Compiler.Lexer

open FSharp.Text.Lexing
open System
open System.Text
open Parser

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let int = ['-' '+']? ['0'-'9']+
let digit = ['0'-'9']
let frac = '.' digit*
let exp = ['e' 'E'] ['-' '+']? digit+
let float = digit* frac? exp?
let id = ( ('-'|"--")? ['_' 'A'-'Z' 'a'-'z'] ['_' 'A'-'Z' 'a'-'z' '0'-'9']* )|('@' digit+)
let op_0 = ['+' '-']
let op_1 = ['*' '/']

let white = [' ' '\t']+
let newline = ['\r' '\n' ' ']+

rule read =
  parse
  | white    { SPACE }
  | newline  { newline lexbuf; NEWLINE }
  | "let"    { LET }
  | "lambda" { LAMBDA }
  | "true"   { TRUE }
  | "false"  { FALSE }
  | "if"     { IF }
  | "then"   { THEN }
  | "else"   { ELSE }
  | id       { ID (string (lexeme lexbuf))}
  | op_0     { BINOP_0 (string (lexeme lexbuf)) }
  | op_1     { BINOP_1 (string (lexeme lexbuf)) }
  | float    { NUMBER (float (lexeme lexbuf)) }
  | '='      { EQUAL }
  | "->"     { RIGHT_ARROW }
  | '"'      { read_string "" false lexbuf } 
  | '{'      { LEFT_BRACE }
  | '}'      { RIGHT_BRACE }
  | '['      { LEFT_BRACK }
  | ']'      { RIGHT_BRACK }
  | '('      { LEFT_PAREN }
  | ')'      { RIGHT_PAREN }
  | ':'      { COLON }
  | ','      { COMMA }
  | '^'      { POWER }
  | '|'      { PIPE }
  | '.'      { DOT }
  | eof      { EOF }
  | _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line + 1) lexbuf.StartPos.Column)) }


and read_string (str: string) (ignorequote: bool) =
  parse
  | '"'           { if ignorequote then (read_string (str + "\\\"") false lexbuf) else STRING (str) }
  | '\\'          { read_string str true lexbuf }
  | [^ '"' '\\']+ { read_string (str + (lexeme lexbuf)) false lexbuf }
  | eof           { raise (Exception ("String is not terminated")) }