// Signature file for parser generated by fsyacc
module Aestas.Commands.Compiler.Parser
type token = 
  | EOF
  | NEWLINE
  | SPACE
  | POWER
  | DOT
  | COMMA
  | COLON
  | RIGHT_ARROW
  | EQUAL
  | BINOP_1 of (string)
  | BINOP_0 of (string)
  | PIPE
  | RIGHT_PAREN
  | LEFT_PAREN
  | RIGHT_BRACK
  | LEFT_BRACK
  | RIGHT_BRACE
  | LEFT_BRACE
  | ELSE
  | THEN
  | IF
  | FALSE
  | TRUE
  | LET
  | LAMBDA
  | STRING of (string)
  | ID of (string)
  | NUMBER of (float)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_NEWLINE
    | TOKEN_SPACE
    | TOKEN_POWER
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_RIGHT_ARROW
    | TOKEN_EQUAL
    | TOKEN_BINOP_1
    | TOKEN_BINOP_0
    | TOKEN_PIPE
    | TOKEN_RIGHT_PAREN
    | TOKEN_LEFT_PAREN
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_LET
    | TOKEN_LAMBDA
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_NUMBER
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startparse
    | NONTERM_parse
    | NONTERM_lines
    | NONTERM_rev_lines
    | NONTERM_expr
    | NONTERM_bind
    | NONTERM_tuple
    | NONTERM_rev_tuple
    | NONTERM_maybe_space
    | NONTERM_value_expr
    | NONTERM_if
    | NONTERM_atom_or_lines
    | NONTERM_expr_or_lines
    | NONTERM_rev_args
    | NONTERM_rev_fargs
    | NONTERM_ftuple
    | NONTERM_rev_ftuple
    | NONTERM_fatom
    | NONTERM_atom
    | NONTERM_atom_eq
    | NONTERM_atom_plus
    | NONTERM_atom_mul
    | NONTERM_atom_powertuple
    | NONTERM_rev_power_tuple
    | NONTERM_atom_unary
    | NONTERM_term
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val parse : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Aestas.Commands.Compiler.Language.Ast list) 
